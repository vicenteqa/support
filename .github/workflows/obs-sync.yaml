name: OBS release

on:
  workflow_call:
    inputs:
      update_changelog:
        type: boolean
        required: false
        default: false
        description: Boolean that indicates if the .changes (changelog) file should be updated.
    secrets:
      OBS_USER:
        required: true
      OBS_PASS:
        required: true

env:
  PACKAGE: supportutils-plugin-trento
  FOLDER: packaging/suse

jobs:
  get-version-and-projects:
    name: Determine Version and OBS Projects
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      obs_projects_json: ${{ steps.set_obs_projects.outputs.obs_projects }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest version tag
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0 --match "v[0-9]*.[0-9]*.[0-9]*" | sed 's/^v//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set OBS projects for matrix
        id: set_obs_projects
        env:
          UPDATE_CHANGELOG: ${{ inputs.update_changelog }}
          OBS_PROJECT_STABLE: ${{ vars.OBS_PROJECT_STABLE }}
          OBS_PROJECT_ROLLING: ${{ vars.OBS_PROJECT_ROLLING }}
        run: |
          OBS_PROJECTS_TO_BUILD='["${{ env.OBS_PROJECT_ROLLING }}"]'
          if [[ "${{ env.UPDATE_CHANGELOG }}" == "true" ]]; then
            OBS_PROJECTS_TO_BUILD='["${{ env.OBS_PROJECT_STABLE }}", "${{ env.OBS_PROJECT_ROLLING }}"]'
          fi
          echo "OBS Projects to build: $OBS_PROJECTS_TO_BUILD"
          echo "obs_projects=$OBS_PROJECTS_TO_BUILD" >> $GITHUB_OUTPUT

  obs-commit:
    name: Commit to OBS project ${{ matrix.obs_project_target }}
    runs-on: ubuntu-24.04
    needs: get-version-and-projects
    strategy:
      fail-fast: false
      matrix:
        obs_project_target: ${{ fromJson(needs.get-version-and-projects.outputs.obs_projects_json) }}
    container:
      image: ghcr.io/trento-project/continuous-delivery:main
      env:
        DEST_FOLDER: "/tmp/osc_project"
      options: -u 0:0
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure OSC
        env:
          OBS_USER: ${{ secrets.OBS_USER }}
          OBS_PASS: ${{ secrets.OBS_PASS }}
        run: |
          mkdir -p $HOME/.config/osc
          cp /home/osc/.config/osc/oscrc $HOME/.config/osc
          /scripts/init_osc_creds.sh
      - name: Prepare _service file with version details
        run: |
          git config --global --add safe.directory /__w/support/support
          VERSION=${{ needs.get-version-and-projects.outputs.version }}
          PACKAGE_FOLDER=${{ env.FOLDER }}/${{ env.PACKAGE }}
          sed -i 's~%%REVISION%%~${{ github.sha }}~' $PACKAGE_FOLDER/_service && \
          sed -i 's~%%VERSION%%~'"${VERSION}"'~' $PACKAGE_FOLDER/_service
      - name: Prepare OBS package
        env:
          OBS_PROJECT: ${{ matrix.obs_project_target }}
        run: |
          PACKAGE_FOLDER=${{ env.FOLDER }}/${{ env.PACKAGE }}
          osc checkout $OBS_PROJECT ${{ env.PACKAGE }} -o $DEST_FOLDER
          cp $PACKAGE_FOLDER/_service $DEST_FOLDER
          cp $PACKAGE_FOLDER/${{ env.PACKAGE }}.spec $DEST_FOLDER
          rm -fv $DEST_FOLDER/*.tar.gz
          pushd $DEST_FOLDER
          osc service manualrun
      - name: Prepare .changes file
        env:
          AUTHOR_EMAIL: trento-developers@suse.com
          UPDATE_CHANGELOG: ${{ inputs.update_changelog }}
          OBS_PROJECT_STABLE: ${{ vars.OBS_PROJECT_STABLE }}
        if: ${{ env.UPDATE_CHANGELOG == true && matrix.obs_project_target == env.OBS_PROJECT_STABLE }}
        run: |
          CHANGES_FILE=${{ env.PACKAGE }}.changes
          TAG=${{ needs.get-version-and-projects.outputs.version }}
          /scripts/gh_release_to_obs_changeset.py ${{ github.repository }} -a ${{ env.AUTHOR_EMAIL }} -t "$TAG" -f "$DEST_FOLDER/$CHANGES_FILE"
      - name: Commit on OBS
        run: |
          pushd $DEST_FOLDER
          osc ar
          osc commit -m "GitHub Actions automated update to reference ${{ github.sha }}"