name: Continous Delivery to SUSE OBS
concurrency: cd-obs-${{ github.ref }}
on:
  push:
    tags-ignore:
      - "*"
    branches:
      - "main"
  pull_request:
  release:
    types: [published]
  workflow_dispatch:

env:
  OBS_USER: ${{ secrets.OBS_USER }}
  OBS_PASS: ${{ secrets.OBS_PASSWORD }} # Asegúrate de que este sea el secreto correcto, en tu mensaje anterior era OBS_PASS
  OBS_PROJECT: ${{ vars.OBS_PROJECT }} # O ${{ secrets.OBS_PROJECT }} si lo manejas como secreto en lugar de variable de repositorio. Asegúrate de que este valor sea 'home:tu_usuario_obs' si quieres usar tu cuenta personal.

jobs:
  obs-commit:
    runs-on: ubuntu-24.04
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    container:
      image: ghcr.io/trento-project/continuous-delivery:main
      env:
        DEST_FOLDER: "/tmp/osc_project"
        FOLDER: packaging/suse # Definido aquí, así que las comprobaciones deberían funcionar
        PACKAGE: supportutils-plugin-trento # Definido aquí, así que las comprobaciones deberían funcionar
      options: -u 0:0
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: latest-tag
        with:
          semver_only: true
          initial_version: 0.0.1
      - name: Configure OSC
        run: |
          mkdir -p $HOME/.config/osc
          cp /home/osc/.config/osc/oscrc $HOME/.config/osc
          /scripts/init_osc_creds.sh
      - name: Prepare _service file with version details (DEBUG)
        run: |
          git config --global --add safe.directory /__w/support/support

          # --- INICIO DEPURACIÓN ---
          echo "DEBUG: Valor de FOLDER: '${FOLDER}'"
          echo "DEBUG: Valor de PACKAGE: '${PACKAGE}'"
          # --- FIN DEPURACIÓN ---

          VERSION=$(/scripts/get_version_from_git.sh)
          
          # --- INICIO DEPURACIÓN ---
          echo "DEBUG: Versión obtenida de /scripts/get_version_from_git.sh: '${VERSION}'"
          if [ -z "$VERSION" ]; then
            echo "ERROR: La variable VERSION está vacía. El script /scripts/get_version_from_git.sh pudo haber fallado o no devolvió nada."
            exit 1 # Forzar un fallo temprano si la versión no se obtiene
          fi
          # --- FIN DEPURACIÓN ---

          PACKAGE_FOLDER="${FOLDER}/${PACKAGE}"
          
          # --- INICIO DEPURACIÓN ---
          echo "DEBUG: Ruta calculada de PACKAGE_FOLDER: '${PACKAGE_FOLDER}'"
          if [ ! -d "$PACKAGE_FOLDER" ]; then
            echo "ERROR: La carpeta '$PACKAGE_FOLDER' no existe. Asegúrate de que la ruta sea correcta y que el 'Checkout' haya descargado todo."
            ls -l "$(dirname "$PACKAGE_FOLDER")" # Listar contenido del directorio padre para depurar
            exit 1
          fi
          if [ ! -f "$PACKAGE_FOLDER/_service" ]; then
            echo "ERROR: El archivo '$PACKAGE_FOLDER/_service' no existe dentro de la carpeta del paquete. Verifica su existencia."
            ls -l "$PACKAGE_FOLDER" # Listar contenido de la carpeta del paquete para depurar
            exit 1
          fi
          # --- FIN DEPURACIÓN ---

          sed -i 's~%%REVISION%%~${{ github.sha }}~' "$PACKAGE_FOLDER/_service" && \
          sed -i 's~%%VERSION%%~'"${VERSION}"'~' "$PACKAGE_FOLDER/_service"
      - name: Prepare OBS package
        run: |
          PACKAGE_FOLDER=$FOLDER/$PACKAGE
          osc checkout $OBS_PROJECT $PACKAGE -o $DEST_FOLDER
          cp "$PACKAGE_FOLDER/_service" "$DEST_FOLDER"
          cp "$PACKAGE_FOLDER/${PACKAGE}.spec" "$DEST_FOLDER"
          rm -fv "$DEST_FOLDER/*.tar.gz"
          pushd "$DEST_FOLDER"
          osc service manualrun
      - name: Prepare .changes file
        if: github.event_name == 'release'
        run: |
          CHANGES_FILE=${PACKAGE}.changes
          TAG=${{ steps.latest-tag.outputs.tag }}
          /scripts/gh_release_to_obs_changeset.py ${{ github.repository }} -a trento-developers@suse.com -t "$TAG" -f "$DEST_FOLDER/$CHANGES_FILE"
      - name: Commit on OBS
        run: |
          pushd "$DEST_FOLDER"
          osc ar
          osc commit -m "GitHub Actions automated update to reference ${{ github.sha }}"